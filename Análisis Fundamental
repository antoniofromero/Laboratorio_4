# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()

# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")

# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")

# -- Cargar y/o instalar en automatico paquetes a utilizar -- #

pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
         "gridExtra","httr","jsonlite","lmtest","lubridate","moments",
         "matrixStats", "PerformanceAnalytics","plyr","quantmod",
         "reshape2","RCurl", "stats","scales","tseries",
         "TTR","TSA","XML","xts","zoo")

inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)

# -- Cargar archivos desde GitHub -- #

RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)

# -- Parametros para usar API-OANDA

# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6" 
# Hora a la que se considera "Fin del dia"
OA_Da <- 16
# Uso horario
OA_Ta <- "GMT"
# Instrumento
OA_In <- "USD_MXN"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "M1"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000

##Importando el archivo 
(library(readxl))
datos=read.csv('TradeBalanceLab4.csv')

indicadores=array(unique(datos$Name))
clasificacion=datos[datos$Name==indicadores[4],1:7]

a=clasificacion$Actual>=clasificacion$Consensus & clasificacion$Consensus>=clasificacion$Previous
b=clasificacion$Actual>=clasificacion$Consensus & clasificacion$Consensus<clasificacion$Previous
c=clasificacion$Actual<clasificacion$Consensus & clasificacion$Consensus>=clasificacion$Previous
d=clasificacion$Actual<=clasificacion$Consensus & clasificacion$Consensus<clasificacion$Previous

tabla=data.frame("Name"=clasificacion$Name,"Class"=0)
tabla$Class[a]=1
tabla$Class[b]=2
tabla$Class[c]=3
tabla$Class[d]=4

data=data.frame(append(clasificacion,table))

lista_precios <- list()
metrics=data.frame("Name"=clasificacion$DateTime,"Metric 1"=0,"Metric 2"=0,"Metric 3"=0)

for(i in 1:length(data$DateTime)){
  
  Fecha_Ejemplo <- data$DateTime[[i]]

# Opcion 2 para convertir a "YYYY-MM-DD"
F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")

if(wday(F2) != 6){
  
  Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
                             DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
                             Instrument = OA_In, 
                             Start = F2, End = F2+2, Count = NULL)
} else {
  Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
                             DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
                             Instrument = OA_In, 
                             Start = F2, End = F2+3, Count = NULL)
}

# Para convertir las fechas del xlsx con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
fecha <- as.character(as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S"))

# Para encontrar el registro donde coincide la fecha y hora del comunicado de 
# indicador y los historicos de precios descargados
ind <- which(Precios_Oanda$TimeStamp == fecha)

# Para visualizar un data frame con los 31 precios deseados. 15 antes del comunicad, 1 
# durante el comunicado y 15 despuÃ©s del comunicado
df <- Precios_Oanda[(ind-15):(ind+15),]
lista_precios[[i]]<-df
metrics$Metric.1[[i]]<-sd(diff(log(lista_precios[[i]]$Close))*MultPip_MT1)
metrics$Metric.2[[i]]<-lista_precios[[i]]$Close[[15]]-lista_precios[[i]]$Close[[31]]
metrics$Metric.3[[i]]<-(min(lista_precios[[i]]$Low)-max(lista_precios[[i]]$High))*MultPip_MT1
}

data=data.frame(append(data,metrics))


tabla2=data.frame("case"=sort(unique(data$Class)),"resultP"=0,"resultN"=0)
tabla2$resultP[[4]]<-count(data$Class==4&data$Metric.2>0)[[2]][2]/count(data$Class==4)[[2]][2]
tabla2$resultP[[3]]<-count(data$Class==3&data$Metric.2>0)[[2]][2]/count(data$Class==3)[[2]][2]
tabla2$resultP[[2]]<-count(data$Class==2&data$Metric.2>0)[[2]][2]/count(data$Class==2)[[2]][2]
tabla2$resultP[[1]]<-count(data$Class==1&data$Metric.2>0)[[2]][2]/count(data$Class==1)[[2]][2]
tabla2$resultN= 1-tabla2$resultP
